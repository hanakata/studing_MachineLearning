対応性のある運用のパターン

ステートレスサービング関数
    本番の機械学習システムが受け取る1秒あたり数千件から数百万件の世族リクエストを同期処理できるようにする
    ステートレス関数とは
        状態を持たず純粋に入力のみで出力が決まる関数のこと
    問題
        モデル全体をメモリに読み込む必要がある
        待ち時間の上限に引っかかる可能性がある
        訓練に最も効果的なモデルの入出力は扱いやすいものとは限らない
    解決
        モデルの数学的核心を捉えプログラミング言語に依存しないフォーマットでモデルをエクスポートする
        本番システムではモデルのフォワード計算式で状態を持たないステートレス関数として復元する
        復元したステートレス関数をRESTエンドポイントを提供するフレームワークでデプロイする

バッチサービング
    問題
        予測はリクエストがあるたびにオンデマンドで行われる
            大規模なデータに対する非同期的な予測が必要となる状況もある
    解決
        バッチサービングパターンは分散型データ処理基盤を利用することで膨大なインスタンスに対して非同期に機械学習推論を行える

継続的モデル評価
    問題
        デプロイしたら機械学習モデルのライフサイクルが終わるわけではない
            動作しているかを確認する必要がある
    解決
        最も直接的な方法
            モデルの予測性能を継続的に監視し開発時と同じ指標でそれを評価すること

2段階予測
    問題
        インターネットに常に接続されていない
            エッジにデプロイする
                モデルはユーザのデバイスに読み込まれるためインターネットに接続する必要がない
    解決
        2段階予測パターン
            問題を2つに分けて考える
                オンデバイスにデプロイ可能な小型で安価なモデル
                クラウド上に必要な時のみ起動するより複雑なモデルをデプロイ

キー付き予測
    問題
        1対1の関係を保つためには各サーバの計算ノードがすべての入力を順に処理しなければならない
        分散型データ処理システムの場合出力順がでたらめになる
            順にするためにはスケーラビリティの問題につながる
    解決
        パススルーキーを利用
            キーはクライアントから入力ごとに対応して出すようにする