1章 製品目標からMLの枠組みへ

データから学習し与えられた目標に合わせて最適化を行うことで問題を解決するため
MLは確率的にふるまう
→従来のプログラミングとは対照的

MLは強力でありまったく新しい製品を生み出すことができる
→逆に言うとパターン認識なので不確実性は伴う。
管理可能な一連の決定論的ルールで解決できる問題にはMLを使わない方が良い

・何が可能であるかを考える
MLモデルは人間がステップバイステップの手順を与えなくても作業を行うことができる
そのため人間の専門家よりも優れた作業や人手では全く対応できない作業を行うことはできる。
MLは幅広く使えるがすべてに合うわけではないのでどれだけその製品に適しているかを評価するべき。
評価する方法は以下
1.製品の目標をMLの構造に当てはめる
2.そのMLによる解決策の実現可能性を評価する

・モデル
MLアルゴリズムはラベルが必要かに基づいて分類される。
MLアプローチは以下に分類
・分類と回帰
一部のプロジェクトではデータポイントをいくつかのカテゴリに分類したり連続的なスケールで値を与える
ことに焦点を当てている。
分類と回帰が似ている理由はほとんどの分類においてモデルがカテゴリに属する確率値の回帰とみなすことができる。
分類とは？
→そのスコアに基づいてオブジェクトをどのカテゴリに帰属させるかを決定すること
回帰プロジェクトでは各サンプルをクラスに分類するわけではなく値を与える
・知識抽出
構造化データとは表形式で保存されたデータのこと。
非構造化データは逆。
知識抽出モデルは非構造化データから構造を抽出することを目的としている。
・カタログ編成
カタログ編成モデルはほとんどの場合、ユーザに提示する一連の結果を生成する。
・生成モデル
生成モデルはユーザ入力に依存するデータの生成に当てている
このモデルはデータをカテゴリに分類したり、スコアリングしたり、情報を抽出したり生成したり
するのではなくデータの生成に焦点を当てている。

・データ
教師ありMLモデルはデータのパターンを利用して入力と出力の間の有用なマッピングを学習する。
データセットに目標とする出力を予測する特徴量が含まれていれば適切なモデルが作れるはず。
→ただしそんなことはほぼない
なので自分たちで追加のデータを検索し選別し収集する必要がある。
データの可用性には最良のシナリオから最も困難なものまで大まかに3つのレベルがある。
・ラベルつけされたデータ→入手困難
・弱いラベルつけされたデータ
・ラベルのないデータ

・MLエディタの構造
目標をユーザがより良い質問を書くのに役立つアシスタントを構築することとしたエディタを考える
エンドツーエンド＝単一のモデルを用いて中間的なステップなしで入力っから出力を行うこと
